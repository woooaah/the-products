#include "mp3d.h"
#include "esp_err.h"
#include "string.h"
mp3FileStream_t* createMp3FileStream(const char* fileName,uint32_t datasSize,uint32_t minKeepSize,uint32_t maxReadBytes)
{
    if(2*minKeepSize > datasSize)
    {
        printf("UserConfigError, mp3decoderInputBufferSize is less than 2* minium keep size");
        return NULL;
    }
    mp3FileStream_t* stream = (mp3FileStream_t*)calloc(1,sizeof(mp3FileStream_t));
    stream->datas = (uint8_t*)calloc(datasSize,sizeof(uint8_t));
    stream->datasSize = datasSize;
    stream->fp = fopen(fileName,"r");
    stream->pLast = datasSize- minKeepSize;
    fread(stream->datas,1,datasSize,stream->fp);
    stream->maxReadBytes = maxReadBytes;
    return stream;
}

esp_err_t reloadMp3FileStream(mp3FileStream_t* stream)
{
    int readSize,leftSize;
    if(stream->pOut > stream->pLast)
    {
        memcpy(stream->datas,stream->datas+stream->pOut,stream->pIn-stream->pOut);
        stream->pIn = stream->pIn-stream->pOut;
        stream->pOut = 0;
    }
    if(stream->pIn < stream->datasSize)
    {
        leftSize = stream->datasSize-stream->pIn;
        readSize = leftSize<stream->maxReadBytes?leftSize:stream->maxReadBytes;
        fread(stream->datas+stream->pIn,1,readSize,stream->fp);
        stream->pIn += readSize;
    }
    return ESP_OK;
}

mp3PcmStream_t* createMp3PcmStream(uint32_t datasSize,uint32_t minKeepSize)
{
    mp3PcmStream_t* stream = (mp3PcmStream_t*)calloc(1,sizeof(mp3PcmStream_t));
    stream->datas = (int16_t*)calloc(datasSize,sizeof(int16_t));
    stream->datasSize = datasSize;
    stream->pLast = datasSize-minKeepSize;
    return stream;
}

int32_t mp3dToA2dpDatacb(mp3PcmStream_t* stream, uint8_t *out, int32_t len)
{
    int size = stream->pIn - stream->pOut;
    size = size<(len/2)?size:(len/2);
    memcpy((int16_t*)out,stream->datas + stream->pOut,size*2);
    stream->pOut += size;
    return size*2;
}

void examples_main()
{
    unsigned char *input_buf = NULL;
    int data_size = 0;
    //打开MP3文件
    FILE* file=fopen("test.mp3", "r");

    //获取MP3文件长度
    fseek(file, 0, SEEK_END);
    data_size = (int)ftell(file);

    //读取整个MP3文件
    fseek(file, 0, SEEK_SET);
    input_buf = malloc(data_size);
    fread(input_buf, 1, data_size, file);

    //初始化minimp3的解码器结构
    static mp3dec_t mp3d;
    mp3dec_init(&mp3d);

    //定义mp3dec_frame_info_t
    mp3dec_frame_info_t info;
    short pcm[MINIMP3_MAX_SAMPLES_PER_FRAME];
    int mp3len = 0;

    //逐帧解码并且播放MP3
    int samples = mp3dec_decode_frame(&mp3d, input_buf, data_size, pcm, &info);
    while(samples) {
        play(pcm, samples);
        mp3len += info.frame_bytes;
        samples = mp3dec_decode_frame(&mp3d, input_buf + mp3len, data_size - mp3len, pcm, &info);
    }

free(input_buf);
}
